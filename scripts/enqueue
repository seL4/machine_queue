#!/bin/bash

if [ "${SCRIPT_PATH}" == "" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

function EnqueueUsage() {
    echo "Usage: $0 enqueue -r|-i|-c <string> -l logfile -s system -f file1 -f file2 .. -f filen"
}

function Enqueue() {
    # Parse the command line
    local file_count=0
    local logfile=""
    local interact=""
    local completion=""
    local files=""
    local system=""
    while [ "$#" -ne 0 ]; do
        case "$1" in
            -l)
                shift
                logfile="$1"
            ;;
            -c)
                shift
                completion="$1"
                if [ "$interact" != "" ]; then
                EnqueueUsage
                    exit -1
                fi
                interact="-c"
            ;;
            -i)
                interact="-i"
                echo "Interactive mode not currently supported. Please use -c and connect on consoles manually"
                exit -1
                if [ "$completion" != "" ]; then
                    EnqueueUsage
                    exit -1
                fi
            ;;
            -r)
                interact="-r"
            ;;
            -f)
                shift
                if ! [ -f "$1" ]; then
                    echo "File \"$1\" either does not exist, or is not considered a valid file"
                    exit -1
                fi
                if [ "$files" != "" ]; then
                    files="$files\n"
                fi
                files="$files$1"
                (( file_count++ ))
            ;;
            -s)
                shift
                system="$1"
            ;;
            --)
                break
            ;;
            -[A-Za-z]*)
                echo "Unknown option $1"
                EnqueueUsage
                exit -1
            ;;
            *)
                break
            ;;
        esac
        shift
    done

    # Check that we got enough parameters
    if [ "$logfile" = "" ]; then
        EnqueueUsage
        exit -1
    fi
    if [ "$system" = "" ]; then
        EnqueueUsage
        exit -1
    fi
    if [ "$interact" = "" ]; then
        EnqueueUsage
        exit -1
    fi

    # Verify the requested system exists
    IsSystemValid "${system}"
    if [ $? -ne 0 ] ; then
        echo "System $system does not exist"
        exit -1
    fi

    # Check that the number of files specified is correct
    if [ "$interact" != "-r" ] ; then
        SystemCorrectNumberOfFiles "${system}" "${file_count}"
        if [ $? -ne 0 ]; then
            echo "Wrong number of files specified for system ${system}"
            exit -1
        fi
    fi

    # See what this user already has
    local completed=$(CountJobs COMPLETE '.*' ${USER})
    if [ ${completed} -ne 0 ]; then
        echo "You already have ${completed} completed jobs that you have not cleaned up"
        echo "Please collect these jobs"
        exit -1
    fi

    # Grab the main lock
    Lock

    # Add the job
    local jobid=$(AddJob "${system}" "${interact}")
    if [ $? -ne 0 ] ; then
        Unlock
        # Error message in the job id
        echo ${jobid}
        exit -1
    fi

    echo "Created Job with ID ${jobid}"
    echo "There are already $(( $(CountJobs QUEUED ${system} '.*') - 1 )) jobs in queue for ${system}"

    # Attempt to construct the job, will fail if anything went wrong
    MakeJob ${jobid}
    if [ $? -ne 0 ]; then
        RemoveJob ${jobid}
        Unlock
        exit -1
    fi

    # Setup is done, release the lock
    Unlock

    echo "Job is queued, notifying bamboo"
    SystemNotifyBamboo ${system}

    # Setup the output pipe that will feed data from the console
    # to the user terminal
    local outpipe=$(OutPipe ${jobid})
    setsid bash -c "trap 'exit 0' $SIGNALS; while true; do cat \"$outpipe\"; done" &
    local outpid=$!

    # Setup a trap handler that will remove this job and notify the server if we try and quit
    # we will fiddle with this trap a bit for when it needs to attempt to tell the remote
    # server to shut down
    trap 'CleanupJob ${jobid} ${outpid} 1 ${interact}' $SIGNALS

    # Hook up the pipe to feed input from user to console if required
    if [ "$interact" != "-c" ]; then
        # This cat will terminate at the same time as when the user does the ctrl+c to
        # terminate the script. so the ctrl+c is both terminating the cat and being caught
        # by our signal handler
        # Killing the cat session also causes an EOF to appear on the pipe
        # which will cause the remote server to realize the job is done and finish
        cat > $(InPipe ${jobid})
        # Wait on the completion semaphore
        lockfile -1 "$(JobLock ${jobid})"
    else
        # Wait on the completion semaphore.
        if ! lockfile -1 "$(JobLock ${jobid})"; then
            lockfile -1 "$(JobLock ${jobid})"
        fi
    fi

    # Our job is done so do not try and signal the remote
    trap 'CleanupJob ${jobid} ${outpid} 0 ${interact}' $SIGNALS

    # Kill the output pipe
    kill -- -$outpid

    # Everything is cleaned up, no longer need the trap handler
    trap '' $SIGNALS

    # Should be complete
    echo "Job complete"

    # Grab the main lock
    Lock

    # Verify our job is complete
    if [ "$(JobStatus ${jobid})" != 'COMPLETE' ]; then
        echo "Job failed to complete or missing!"
        Unlock
        exit 1
    fi

    # Copy the output
    local source_log=$(JobOutput ${jobid})
    if ! [ -e "${source_log}" ]; then
        echo "No output found! Not outputting to ${logfile}"
    else
        echo "Copying output to \"$logfile\""
        cp "$(JobOutput ${jobid})" "$logfile"
    fi
    # See if we can get an error code
    local result=$(JobError ${jobid})
    if [ $? -ne 0 ]; then
        result="0"
    fi
    # Cleanup the job
    echo "Cleaning up job"
    RemoveJob ${jobid}

    # Release the lock and go home
    Unlock
    echo "Done (${result})"

    exit $result
}
