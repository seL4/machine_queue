#!/bin/sh

if [ "${SCRIPT_PATH}" = "" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

# List of a bunch of signals that we will try and trap on. This is basically a
# 'if anything at all happens try and shut down our job cleanly' approach
SIGNALS="INT TERM HUP QUIT KILL PIPE"

EnqueueUsage() {
    echo "$0 run -r|-c <string> -l logfile -s system [-w retry-time] [-t retry-count] [-n] [-a] [-d timeout] [-e <string>] [-k <string>] [-L] [-b <file>] -f file1 -f file2 .. -f filen"
    echo
    echo "   Acquires a lock for a machine, and once locked runs the specified job"
    echo "   Jobs can include just a reservation"
    echo
    echo "   Output from the machine is generally collected and passed back to the"
    echo "   user both on stdout and in the form of an option logfile."
    echo
    echo "   Jobs can be canceled at any time with ^C, which will notify the server"
    echo "   if the job is running and remove the job from the queue."
    echo
    echo "   Returns 0 on success, nonzero if something went wrong"
    echo
    echo "Options:"
    echo
    echo " -r          Reserves the device. Will not reboot or run an image"
    echo " -n          No lock changes. Checks that you have the lock, and then runs an image. Will not unlock afterwards."
    echo " -a          Keep the machine alive after image is done"
    echo " -c TEXT     Image is run until the specified regular completion text"
    echo " -e TEXT     Image is run until the specified error text is found"
    echo " -d TIME     Timeout (in seconds) to wait for the completion text (default -1 AKA no timeout)"
    echo " -k KEY      Key for obtaining the lock"
    echo " -l FILE     Optional location to write all the console output to"
    echo " -L          This is a Linux image not seL4"
    echo " -b FILE     Dtb to use instead of the default one with a Linux image"
    echo " -s TEXT     Specifies which machine this job is for"
    echo " -f FILE [+] Files to use as the job image"
    echo " -w TIME     Number of seconds to wait between each attempt to acquire the lock (default 8)"
    echo " -t RETRIES  Number of retries to preform for acquiring the lock (default -1)"
    echo
}

Enqueue() {
    # Parse the command line
    file_count=0
    retry_period=8
    total_retries=-1
    logfile=""
    interact=""
    no_lock_mods=false
    keep_alive=false
    completion=""
    completion_timeout=-1
    errortxt=""
    files=""
    system=""
    linux=""
    key="0"
    while [ "$#" -ne 0 ]; do
        case "$1" in
            -L)
                linux="-L"
            ;;
            -b)
                shift
                if ! [ -f "$1" ]; then
                    echo "dtb file \"$1\" either does not exist, or is not considered a valid file"
                    exit -1
                fi

                # We want the var to contain "-b my.dtb" so we can identify
                # that it is a dtb later
                dtbflag="-b $1"
            ;;
            -l)
                shift
                logfile="$1"
            ;;
            -c)
                shift
                completion="$1"
                if [ "$interact" ]; then
                    EnqueueUsage
                    exit -1
                fi
                interact="-c"
            ;;
            -e)
                shift
                errortxt="$1"
            ;;
            -d)
                shift
                completion_timeout="$1"
            ;;
            -r)
                interact="-r"
            ;;
            -a)
                keep_alive=true
            ;;
            -n)
                no_lock_mods=true
            ;;
            -f)
                shift
                if ! [ -f "$1" ]; then
                    echo "File \"$1\" either does not exist, or is not considered a valid file"
                    exit 1
                fi
                if [ "$files" != "" ]; then
                    files="$files "
                fi
                files="$files$1"
                file_count=`expr $file_count + 1`
            ;;
            -s)
                shift
                system="$1"
            ;;
            -k)
                shift
                key="$1"
            ;;
            -w)
                shift
                retry_period="$1"
            ;;
            -t)
                shift
                total_retries="$1"
            ;;
            --)
                break
		;;
	    help)
		EnqueueUsage
		exit 0
		;;
            *)
                echo "Unknown option $1"
                EnqueueUsage
                exit 1
            ;;
        esac
        shift
    done

    # Check that we got enough parameters
    if [ ! "$system" ]; then
        EnqueueUsage
        exit 1
    fi

    if [ ! "$interact" ]; then
        EnqueueUsage
        exit 1
    fi

    # Verify the requested system exists
    if ! IsSystemValid "${system}" ; then
        # If it's not a system, is it a pool?
        if ! IsPoolValid "${system}" ; then
            echo "System or pool '$system' does not exist. Valid systems are"
            SystemList
            echo "Valid pools are"
            PoolList
            exit 1
        fi
        # Select a system from the pool
        pool=${system}
        system=$(GetRandomSystemFromPool_"${pool}")
        echo "Selecting system '${system}' from pool '${pool}'"
    fi

    if [ ! -z "${linux}" ]; then
        if ! SystemBootsLinuxPXE "${system}" ; then
            echo "System cannot boot Linux over the network."
            exit 1
        fi
    fi

    if [ ! -z "$dtbflag" ]; then
        if ! SystemAcceptsDtb "${system}" ; then
            echo "System does not accept a dtb"
            exit 1
        fi
    fi

    if [ ! -z "$dtbflag" ] && [ -z "$linux" ]; then
        echo "A dtb may only be supplied when booting a linux image over the network."
        exit 1
    fi

    # Check that the number of files specified is correct
    if [ "$interact" != "-r" ] ; then
        if ! SystemCorrectNumberOfFiles ${linux} "${system}" "${file_count}"; then
            echo "Wrong number of files specified for system ${system}"
            exit 1
        fi
    fi

    if ${no_lock_mods} ; then
        if ! LockIOwn "${system}"; then
            echo "Failed to run because you said you own the lock (-n flag), but you don't!"
            LockSystemPrintInfo "${system}"
            exit 1
        fi
    else
        echo "Acquiring lock for ${system}"

        # Print out potentially useful information to the user about
        # the current status of the lock
        LockSystemPrintInfo "${system}"

        # We can setup the trap early as we check if we actually own the
        # the lock before releasing it
        trap "UnlockSystem \"${system}\" 0 \"${key}\"; exit 1" ${SIGNALS}

        if ! LockSystem "${system}" "${retry_period}" "${total_retries}" "${key}"; then
            echo "Failed to acquire lock for system (${system})"
            exit 2
        fi
    fi

    echo "Lock acquired, we are allowed to run"
    local ret=0

    if [ "${interact}" = "-r" ]; then
        echo "This is a reservation. You now own ${system} and"
        echo "can do what you want. Press ctrl+d or enter here when done"
        read line
        echo "Attempting to power off machine now that you are done"
        SystemPowerOff "${system}"
    else
        # Run the image. 'files' is deliberately not in quotes so the multiple
        # files expands to multiple arguments
        # 'dtbflag' is deliberately not in quotes so it expands to multiple
        # parameters '-b' and 'my.dtb'
        # 'linux' is deliberately not in quotes so it will not create an empty
        # parameter if the flag is not set
        SystemRunImage "${system}" "${completion}" "${completion_timeout}" "${errortxt}" "${logfile}" "${keep_alive}" ${linux} ${dtbflag} $files
        ret=$?
    fi

    if ! ${no_lock_mods} ; then
        UnlockSystem "${system}" 0 "${key}"
        trap "exit 1" ${SIGNALS}
    fi

    exit $ret

}
