#!/bin/bash

if [ "${SCRIPT_PATH}" == "" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

# List of a bunch of signals that we will try and trap on. This is basically a
# 'if anything at all happens try and shut down our job cleanly' approach
SIGNALS="SIGINT SIGTERM SIGHUP SIGQUIT SIGKILL SIGSTOP SIGPIPE"

function EnqueueUsage() {
    echo "$0 run -r|-i|-c <string> -l logfile -s system [-w retry-time] [-t retry-count] -f file1 -f file2 .. -f filen"
    echo
    echo "   Acquires a lock for a machine, and once locked runs the specified job"
    echo "   Jobs can include just a reservation"
    echo
    echo "   Output from the machine is generally collected and passed back to the"
    echo "   user both on stdout and in the form of an option logfile."
    echo
    echo "   Jobs can be canceled at any time with ^C, which will notify the server"
    echo "   if the job is running and remove the job from the queue."
    echo
    echo "   Returns 0 on success, nonzero if something went wrong"
    echo
    echo "Options:"
    echo
    echo " -r          Reserves the device. Will not reboot or run an image"
    echo " -c TEXT     Image is run until the specified regular completion text"
    echo " -l FILE     Optional location to write all the console output to"
    echo " -s TEXT     Specifies which machine this job is for"
    echo " -f FILE [+] Files to use as the job image"
    echo " -w TIME     Number of seconds to wait between each attempt to acquire the lock (default 8)"
    echo " -t RETRIES  Number of retries to preform for acquiring the lock (default 8)"
    echo
}

function Enqueue() {
    # Parse the command line
    local file_count=0
    local retry_period=8
    local total_retries=8
    local logfile=""
    local interact=""
    local completion=""
    local files=""
    local system=""
    local file_prefix=""
    while [ "$#" -ne 0 ]; do
        case "$1" in
            -l)
                shift
                logfile="$1"
            ;;
            -c)
                shift
                completion="$1"
                if [ "$interact" != "" ]; then
                    EnqueueUsage
                    exit -1
                fi
                interact="-c"
            ;;
            -r)
                interact="-r"
            ;;
            -f)
                shift
                if ! [ -f "$1" ]; then
                    echo "File \"$1\" either does not exist, or is not considered a valid file"
                    exit -1
                fi
                if [ "$files" != "" ]; then
                    files="$files "
                fi
                files="$files$1"
                (( file_count++ ))
            ;;
            -s)
                shift
                system="$1"
            ;;
            -p)
                shift
                file_prefix="$1"
            ;;
            -w)
                shift
                retry_period="$1"
            ;;
            -t)
                shift
                total_retries="$1"
            ;;
            --)
                break
            ;;
            *)
                echo "Unknown option $1"
                EnqueueUsage
                exit -1
            ;;
        esac
        shift
    done

    # Check that we got enough parameters
    if [ "$system" = "" ]; then
        EnqueueUsage
        exit -1
    fi
    if [ "$interact" = "" ]; then
        EnqueueUsage
        exit -1
    fi

    # Verify the requested system exists
    IsSystemValid "${system}"
    if [ $? -ne 0 ] ; then
        echo "System $system does not exist. Valid systems are"
        SystemList
        exit -1
    fi

    # Check that the number of files specified is correct
    if [ "$interact" != "-r" ] ; then
        if ! SystemCorrectNumberOfFiles "${system}" "${file_count}"; then
            echo "Wrong number of files specified for system ${system}"
            exit -1
        fi
    fi

    echo "Acquiring lock for ${system}"

    # Print out potentially useful information to the user about
    # the current status of the lock
    LockSystemPrintInfo "${system}"

    # We can setup the trap early as we check if we actually own the
    # the lock before releasing it
    trap "UnlockSystem ${system} 0; exit 1" ${SIGNALS}

    if ! LockSystem "${system}" "${retry_period}" "${total_retries}"; then
        echo "Failed to acquire lock for system (${system})"
        exit -1
    fi

    echo "Lock acquire, we are allowed to run"
    local ret=0

    if [ "${interact}" = "-r" ]; then
        echo "This is a reservation. You now own ${system} and"
        echo "can do what you want. Press ctrl+d or enter here when done"
        read line
    else
        # Run the image. 'files' is deliberately no in quotes so the multiple
        # files expands to multiple arguments
        SystemRunImage ${system} "${completion}" "${logfile}" $files
        ret=$?
    fi


    UnlockSystem ${system} 0
    trap "exit 1" ${SIGNALS}

    exit $ret

}
