#!/bin/sh

if [ "${SCRIPT_PATH}" = "" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

HaveRebootAndConsole() {
    HOSTS="
tftp
"
    echo "$HOSTS" | grep -q $(hostname)
}

RebootShutdown() {
    machine=$1
    if ! HaveRebootAndConsole; then
        ssh -tt -oLogLevel=quiet ${HOST} "stty isig -echoctl -echo; /tftpboot/${machine}/reboot --shutdown"
    else
        "/tftpboot/${machine}/reboot" --shutdown
    fi       
}

RebootConsoleRunTwoFiles() {
    [ "$1" = '-L' ] && {
	linux="-L"
	shift
    }
    completion="$1"
    completion_timeout="$2"
    errortxt="$3"
    output="$4"
    keep_alive="$5"
    kernel="$6"
    rootserver="$7"
    machine="$8"

    if echo "$kernel" | grep -iq -v "kernel" && echo "$rootserver" | grep -iq "kernel"; then
        echo -e "\e[31mWARNING: Kernel image file must precede rootserver image file!\e[0m"
    fi

    ka_flag=""
    if $keep_alive ; then
        ka_flag="-a -i"
    fi

    if ! HaveRebootAndConsole; then
        logfile=$(RemoteCommandOn ${HOST} "mktemp")
        # need to copy remotely
        kernelfile=$(RemoteCommandOn ${HOST} "mktemp")
        rootserverfile=$(RemoteCommandOn ${HOST} "mktemp")
        if ! scp "${kernel}" "${HOST}:${kernelfile}"; then
            echo "Failed to copy kernel image"
            RemoteCommandOn ${HOST} rm "${kernelfile}"
            RemoteCommandOn ${HOST} rm "${rootserverfile}"
            RemoteCommandOn ${HOST} rm "${logfile}"
            return 1
        fi
        if ! scp "${rootserver}" "${HOST}:${rootserverfile}"; then
            echo "Failed to copy rootserver image"
            RemoteCommandOn ${HOST} rm "${kernelfile}"
            RemoteCommandOn ${HOST} rm "${rootserverfile}"
            RemoteCommandOn ${HOST} rm "${logfile}"
            return 1
        fi
        ssh -tt -oLogLevel=quiet ${HOST} "stty isig -echoctl -echo; /tftpboot/${machine}/reboot $linux -l '${logfile}' -c '${completion}' -t '${completion_timeout}' -e '${errortxt}' -k '${kernelfile}' -u '${rootserverfile}' ${ka_flag}"
        ret=$?
        if [ "${output}" != "" ]; then
            scp "${HOST}:${logfile}" "${output}"
        fi
        RemoteCommandOn ${HOST} rm "${kernelfile}"
        RemoteCommandOn ${HOST} rm "${rootserverfile}"
        RemoteCommandOn ${HOST} rm "${logfile}"
        return $ret
    fi
    if [ "${output}" = "" ]; then
        "/tftpboot/${machine}/reboot"  $linux -t "${completion_timeout}" -c "${completion}" -e "${errortxt}" -k "${kernel}" -u "${rootserver}" ${ka_flag}
    else
        "/tftpboot/${machine}/reboot" $linux -t "${completion_timeout}" -c "${completion}" -e "${errortxt}" -l "${output}" -k "${kernel}" -u "${rootserver}" ${ka_flag}
    fi
}

RebootConsoleRunOneFile() {
    [ "$1" = '-L' ] && {
	linux="-L"
	shift
    }
    completion=$1
    completion_timeout=$2
    errortxt=$3
    output=$4
    keep_alive=$5
    kernel=$6
    machine=$7
    
    logfile=""
    kernelfile=""

    ka_flag=""
    if $keep_alive ; then
        ka_flag="-a -i"
    fi

    if ! HaveRebootAndConsole; then
        logfile=$(RemoteCommandOn ${HOST} "mktemp")
        # need to copy remotely
        kernelfile=$(RemoteCommandOn ${HOST} "mktemp")
        if ! scp "${kernel}" "${HOST}:${kernelfile}"; then
            echo "Failed to copy kernel image"
            RemoteCommandOn ${HOST} rm "${kernelfile}"
            RemoteCommandOn ${HOST} rm "${logfile}"
            return 1
        fi
        ssh -tt -oLogLevel=quiet ${HOST} "stty isig -echoctl -echo; /tftpboot/${machine}/reboot $linux -l '${logfile}' -c '${completion}' -t '${completion_timeout}' -e '${errortxt}' -k '${kernelfile}' ${ka_flag}"
        ret=$?
        if [ "${output}" != "" ]; then
            scp "${HOST}:${logfile}" "${output}"
        fi
        RemoteCommandOn ${HOST} rm "${kernelfile}"
        RemoteCommandOn ${HOST} rm "${logfile}"
        return $ret
    fi
    if [ "${output}" = "" ]; then
        "/tftpboot/${machine}/reboot" $linux -t "${completion_timeout}" -c "${completion}" -e "${errortxt}" -k "${kernel}" ${ka_flag}
    else
        "/tftpboot/${machine}/reboot" $linux -t "${completion_timeout}" -c "${completion}" -e "${errortxt}" -l "${output}" -k "${kernel}" ${ka_flag}
    fi
}
