#!/bin/bash

if [ "${SCRIPT_PATH}" == "" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

function LockName() {
    local system=$1
    echo "${BASE}/${system}.lock"
}

function LockOwner() {
    local system=$1
    RemoteCommand bash -c "stat --format='%U' $(LockName ${system}) 2>/dev/null" | sed 's/\r//g'
}

function LockGetInfo() {
    RemoteCommand bash -c "stat --format='%U,%y' $(LockName ${system}) 2>/dev/null"| sed 's/\r//g'
}

function LockGetKey() {
    local system=$1
    echo `RemoteCommand bash -c "cat $(LockName ${system})"`
}

function LockIOwn() {
    local system=$1
    local owner=`LockOwner ${system}`
    if [ "${owner}" != "${REMOTEUSER}" ]; then
        return -1
    fi
    return 0
}

function LockSystemPrintInfo() {
    local system=$1
    local info=$(LockGetInfo)
    local owner=`echo $info | cut -d ',' -f 1`
    local since=`echo $info | cut -d ',' -f 2`
    local lockkey=`LockGetKey ${system}`
    if [ "${owner}" == "" ]; then
        echo "Lock for $system currently free"
        return;
    fi
    echo -n "Lock for $system held by $owner since $since"
    if [ "${lockkey}" != "" ]; then
        echo " with key '${lockkey}'"
    else
        echo ""
    fi
}

function LockSystem() {
    local system=$1
    local retry_period=$2
    local total_retries=$3
    local key=$4
    local owner=`LockOwner ${system}`

    # Error checking - the same person can't relock the same lock
    #                - if they are trying to, check if they are using a different key
    if [ "${owner}" == "${REMOTEUSER}" ]; then
        lockkey=`LockGetKey ${system}`
        if [ "${lockkey}" == "" ]; then
            echo "Attempting to grab lock you already own. Please explicitly release"
            return -1
        else
            if [ "${lockkey}" == "${key}" ]; then
                echo "Attempting to grab lock you already own with the same key. Please explicitly release"
                return -1
            fi
        fi
    fi

    RemoteCommand lockfile -"${retry_period}" -r "${total_retries}" "$(LockName ${system})"

    if [ "${key}" != "" ]; then
        # If a key was used, put it inside the lock
        RemoteCommand chmod u+w "$(LockName ${system})"
        RemoteCommand echo -n "${key}" > "$(LockName ${system})"
        RemoteCommand chmod u-w "$(LockName ${system})"
    fi

    return $?
}

function UnlockSystem() {
    local sytem=$1
    local force=$2
    local key=$3
    if [ "${force}" -ne 1 ]; then
        local owner=`LockOwner ${system}`
        if [ "${owner}" != "${REMOTEUSER}" ]; then
            echo "Attempting to unlock system ${system} that you do not hold"
            return;
        fi
        lockkey=`LockGetKey ${system}`
        if [ "${lockkey}" != "${key}" ]; then
            echo "Attempting to unlock system ${system} with the wrong key!"
            return;
        fi 
    fi
    RemoteCommand rm -f "$(LockName ${system})"
    local owner=`LockOwner ${system}`
    if [ "${owner}" == "${REMOTEUSER}" ]; then
        echo "Failed to release lock. Retrying"
        UnlockSystem "${system}" "${force}"
    fi
}

function UserLockUsage() {
    echo "$0 sem -signal|-wait|-info SYSTEM [-f] [-w retry-time] [-t retry-count] [-k LOCK_KEY]"
    echo
    echo "   Manually manipulate locks for machines. The lock for each system"
    echo "   can be acquired or released."
    echo
    echo "   You can forcively release a lock for a system that you do not"
    echo "   currently own by the -f flag"
    echo
    echo " Options:"
    echo
    echo " -info SYSTEM     Display lock information for the specified SYSTEM"
    echo " -signal SYSTEM   Release the lock for the specified SYSTEM"
    echo " -wait SYSTEM     Acquire the lock for the specified SYSTEM"
    echo " -w TIME          Number of seconds to wait between each attempt to acquire the lock (default 8)"
    echo " -t RETRIES       Number of retries to preform for acquiring the lock (default -1)"
    echo " -f               Forcefully releases a lock even if you are not the owner"
    echo " -k LOCK_KEY      Set a key inside the lock"
    echo
}

function UserLock() {
    local system=""
    local action=""
    local retry_period=8
    local total_retries=-1
    local force=0
    local key=""
    while [ "$#" -ne 0 ]; do
        case "$1" in
            -info)
                shift
                system="$1"
                action="-info"
            ;;
            -signal)
                shift
                system="$1"
                action="-signal"
            ;;
            -wait)
                shift
                system="$1"
                action="-wait"
            ;;
            -w)
                shift
                retry_period="$1"
            ;;
            -t)
                shift
                total_retries="$1"
            ;;
            -f)
                shift
                force=1
            ;;
            -k)
                shift
                key="$1"
            ;;
            help)
                UserLockUsage
                exit -1
            ;;
            --)
                break
            ;;
            *)
                echo "Unknown option $1"
                UserLockUsage
                exit -1
            ;;
        esac
        shift
    done

    IsSystemValid "${system}"
    if [ $? -ne 0 ]; then
        echo "System $system does not exist. Valid systems are"
        SystemList
        exit -1
    fi

    case "${action}" in
        -info)
            LockSystemPrintInfo "${system}"
        ;;
        -signal)
            UnlockSystem "${system}" "${force}" "${key}"
        ;;
        -wait)
            if ! LockSystem "${system}" "${retry_period}" "${total_retries}" "${key}"; then
                echo "Failed to acquire lock for system (${system})"
                exit 2
            fi
        ;;
        *)
            echo "Unknown usage"
            UserLockUsage
            exit -1
        ;;
    esac
    exit 0
}
