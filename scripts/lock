#!/bin/sh

if [ ! "${SCRIPT_PATH}" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

LockName() {
    echo "${BASE}/$1.lock"
}

KeyName() {
    echo "${BASE}/$1.key"
}

LockOwner() {
    RemoteCommand "/bin/sh -c \"stat --format='%U' $(LockName "$1") 2>/dev/null\""
}

LockGetInfo() {
    RemoteCommand "/bin/sh -c \"stat --format='%U,%y' $(LockName "$1") 2>/dev/null\""
}

LockGetKey() {
    RemoteCommand cat "$(KeyName "$1")"
}

LockIOwn() {
    owner="$(LockOwner "$1")"
    [ "${owner}" = "${REMOTEUSER}" ]
}

GetAllLockedSystems() {
    RemoteCommand find ${BASE} -name '*.lock' -print0 |
    xargs -0 -i basename {} .lock
    echo
}

LockSystemPrintInfo() {
    system="$1"

    info="$(LockGetInfo "$system")"
    owner=$(echo "$info" | cut -d ',' -f 1)
    since=$(echo "$info" | cut -d ',' -f 2)
    lockkey=$(LockGetKey "${system}")
    if [ ! "${owner}" ]; then
        echo "Lock for $system currently free"
        return;
    fi
    echo -n "Lock for $system held by $owner since $since"
    if [ "${lockkey}" != "0" ]; then
        echo " with key '${lockkey}'"
    else
        echo ""
    fi
}

# This prints the status of the lock in a more machine-readable format
LockSystemDumpInfo() {
    system="$1"
    info=$(LockGetInfo)
    owner=$(echo "$info" | cut -d ',' -f 1)
    since=$(echo "$info" | cut -d ',' -f 2)
    lockkey=$(LockGetKey "${system}")
    if [ "${owner}" = "" ];
    then
    echo "FREE"
    else
    echo "LOCKED"
    echo "$owner"
    echo "$since"
        if [ "${lockkey}" != "0" ];
    then
            echo "${lockkey}"
    fi
    fi
}

LockSystem() {
    system="$1"
    retry_period="$2"
    total_retries="$3"
    key="$4"
    owner=$(LockOwner "${system}")

    # Error checking - the same person can't relock the same lock
    #                - if they are trying to, check if they are using a different key
    if [ "${owner}" = "${REMOTEUSER}" ]
    then
        lockkey=$(LockGetKey "${system}")
        if [ "${lockkey}" = "0" -a  "${key}" = "0" ]
        then
            echo "Attempting to grab lock you already own. Please explicitly release"
            return 1
        fi
        if [ "${lockkey}" = "${key}" ]
        then
            echo "Attempting to grab lock you already own with the same key. Please explicitly release"
            return 2
        fi
    fi

    RemoteCommand "lockfile -'${retry_period}' -r '${total_retries}' '$(LockName "${system}")' && printf '${key}' > '$(KeyName "${system}")' && chmod a-w '$(KeyName "${system}")'"

    [ "$?" -ne  0 ] && return 3

    return 0
}

UnlockSystem() {
    system="$1"
    force="$2"
    key="$3"

    if [ "${force}" -ne 1 ]; then
        owner=$(LockOwner "${system}")
        if [ "${owner}" != "${REMOTEUSER}" ]; then
            echo "Attempting to unlock system ${system} that you do not hold"
            return;
        fi
        lockkey=$(LockGetKey "${system}")
        if [ "${lockkey}" != "${key}" ]; then
            echo "Attempting to unlock system ${system} with the wrong key!"
            return;
        fi
    fi
    RemoteCommand rm -f "$(KeyName "${system}")" "$(LockName "${system}")"
}

UserLockUsage() {
    echo "$0 sem -signal|-wait|-info SYSTEM [-f] [-w retry-time] [-t retry-count] [-k LOCK_KEY]"
    echo
    echo "   Manually manipulate locks for machines. The lock for each system"
    echo "   can be acquired or released."
    echo
    echo "   You can forcively release a lock for a system that you do not"
    echo "   currently own by the -f flag"
    echo
    echo " Options:"
    echo
    echo " -info SYSTEM     Display lock information for the specified SYSTEM"
    echo " -mr-info SYSTEM  Display lock information for the specified SYSTEM in machine-readable format"
    echo " -signal SYSTEM   Release the lock for the specified SYSTEM"
    echo " -wait SYSTEM     Acquire the lock for the specified SYSTEM"
    echo " -w TIME          Number of seconds to wait between each attempt to acquire the lock (default 8)"
    echo " -t RETRIES       Number of retries to preform for acquiring the lock (default -1)"
    echo " -f               Forcefully releases a lock even if you are not the owner"
    echo " -k LOCK_KEY      Set a key inside the lock"
    echo
}

UserLock() {
    retry_period=8
    total_retries=-1
    force=0
    key="0"
    while [ "$#" -ne 0 ]; do
        case "$1" in
            -info)
                shift
                system="$1"
                action="-info"
            ;;
            -mr-info)
                shift
                system="$1"
                action="-mr-info"
            ;;
            -signal)
                shift
                system="$1"
                action="-signal"
            ;;
            -wait)
                shift
                system="$1"
                action="-wait"
            ;;
            -w)
                shift
                retry_period="$1"
            ;;
            -t)
                shift
                total_retries="$1"
            ;;
            -f)
                shift
                force=1
            ;;
            -k)
                shift
                key="$1"
            ;;
            help)
                UserLockUsage
                exit -1
            ;;
            --)
                break
            ;;
            *)
                echo "Unknown option $1"
                UserLockUsage
                exit -1
            ;;
        esac
        shift
    done

    IsSystemValid "${system}"
    if [ $? -ne 0 ]; then
        # If it's not a system, is it a pool?
        IsPoolValid "${system}"
        if [ $? -ne 0 ] ; then
            echo "System or pool '$system' does not exist. Valid systems are"
            SystemList
            echo "Valid pools are"
            PoolList
            exit -1
    fi
        # Select a system from the pool
        pool=${system}
        system=$(GetRandomSystemFromPool_"${pool}")
        echo "${system}"
    fi

    case "${action}" in
        -info)
            LockSystemPrintInfo "${system}"
        ;;
        -mr-info)
            LockSystemDumpInfo "${system}"
        ;;
        -signal)
            UnlockSystem "${system}" "${force}" "${key}"
        ;;
        -wait)
            if ! LockSystem "${system}" "${retry_period}" "${total_retries}" "${key}"; then
                echo "Failed to acquire lock for system (${system})"
                exit 2
            fi
        ;;
        *)
            echo "Unknown usage"
            UserLockUsage
            exit -1
        ;;
    esac
    exit 0
}
