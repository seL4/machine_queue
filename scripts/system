#!/bin/sh
#
# Copyright 2021 UNSW, Sydney
#
# SPDX-License-Identifier: GPL-2.0-only

if [ "${SCRIPT_PATH}" = "" ]; then
    echo "This script should not be called directly! Please use mq.sh"
    exit -1
fi

IsSystemValid() {
    system="$1"
    [ -f "${SCRIPT_PATH}/scripts/systems/${system}" ]
}

SystemAcceptsDtb() {
    system="$1"
    [ "$("DTB_${system}")" = "yes" ]
}

SystemBootsLinuxPXE() {
    system="$1"
    [ "$("PXELinux_${system}")" = "yes" ]
}

SystemList() {
    (
	cd "${SCRIPT_PATH}/scripts/systems/"
	echo * | sed -e 's/ unavailable//' -e 's/ [^ ]*~//g' -e 's/  */\n/g'
    )
}

for system in $(SystemList)
do
    . "${SCRIPT_PATH}/scripts/systems/${system}"
done

OutputSystemList() {
    system=""

    case "$1" in
	help)
	    printf >&2 "systems [help|simple]"
	    printf >&2 "Print list of available systems.  With 'simple' just give their names"
	    return 0
	    ;;
	simple)
	    SystemList
	    return 0
	    ;;
    esac
    printf "+----------------+------+---------+-----------------+----------------+-------+-------+--------+\n"
    printf "| Name           | Arch | ISA     | SoC             | CPU            | Cores | RAM   | MaxCLK |\n"
    printf "+----------------+------+---------+-----------------+----------------+-------+-------+--------+\n"
    for system in $(SystemList)
    do
        printf "| %14s " "${system}"
        printf "| %5s "  "$("Arch_${system}")"
        printf "| %7s "  "$("ISA_${system}")"
        printf "| %15s " "$("SOC_${system}")"
        printf "| %14s " "$("CPU_${system}")"
        printf "| %5s "  "$("Cores_${system}")"
        printf "| %5s "  "$("RAM_${system}")"
        printf "| %6s "  "$("MaxCLK_${system}")"
        printf "|\n"
    done
    printf "+----------------+------+---------+-----------------+----------------+-------+-------+--------+\n"
    OutputPoolList
}

OutputFeatureList() {
    printf "+----------------+----------------+------------+\n"
    printf "| Name           | PXE boot Linux | Custom DTB |\n"
    printf "+----------------+----------------+------------+\n"
    for system in $(SystemList)
    do
        printf "| %14s " "${system}"
        printf "| %14s " "$("PXELinux_${system}")"
        printf "| %10s " "$("DTB_${system}")"
        printf "|\n"
    done
    printf "+----------------+----------------+------------+\n"
}

OutputSystemTSV() {
    printf "name\tarch\tsel4_plat\tisa\tsoc\tcpu\tcores\tram\tmax_clk\tnum_files\n"
    for system in $(SystemList)
    do
		printf \
			"%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
        	"${system}" \
        	"$("Arch_${system}")" \
        	"$("Sel4Plat_${system}")" \
        	"$("ISA_${system}")" \
        	"$("SOC_${system}")" \
        	"$("CPU_${system}")" \
        	"$("Cores_${system}")" \
        	"$("RAM_${system}")" \
        	"$("MaxCLK_${system}")" \
			"$("SystemNumFiles_${system}")"
    done
}

SystemCorrectNumberOfFiles() {
    [ "$1" = "-L" ] && {
	linux="-L"
	shift
    }
    system=$1
    num=$2
    system_num=""
    system_num="$("SystemNumFiles_${system}" $linux)"
    [ "${num}" -eq "${system_num}" ]
}

SystemPowerOff() {
    system=$1
    "SystemPowerOff_${system}"
}

SystemRunImage() {
    system="$1"
    completion="$2"
    completion_timeout="$3"
    errortxt="$4"
    logfile="$5"
    keep_alive="$6"
    kernel="$7"
    rootserver=""

    [ $kernel = "-L" ] && {
	linux="-L"
	shift
	kernel="$7"
    }

    [ $kernel = "-b" ] && {
        dtbflag="$7 $8"
        shift 2
        kernel="$7"
    }

    [ $kernel = "--bitstream" ] && {
        bitstreamflag="$7 $8"
        shift 2
        kernel="$7"
    }

    system_name="$("SystemName_${system}")"

    if [ "$("SystemNumFiles_${system}" $linux)" -eq 2 ]; then
        rootserver="$8"
        RebootConsoleRunTwoFiles $linux $dtbflag $bitstreamflag "${completion}" "${completion_timeout}" "${errortxt}" "${logfile}" "${keep_alive}" "${kernel}" "${rootserver}" "${system_name}"
    else
        RebootConsoleRunOneFile $linux $dtbflag $bitstreamflag "${completion}" "${completion_timeout}" "${errortxt}" "${logfile}" "${keep_alive}" "${kernel}" "${system_name}"
    fi
}
